/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    Queue<TreeNode> q;
    Stack<TreeNode> s;
    public BSTIterator(TreeNode root) {
        s = new Stack<TreeNode>();
        q = new LinkedList<TreeNode>();
        while(!s.isEmpty() || root != null) {
            while(root != null) {
                s.push(root);
                root = root.left;
            }
            if(!s.isEmpty() ) {
                TreeNode t = s.pop();
                q.offer(t);
                root = t.right;
            }
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !q.isEmpty();
            
    }

    /** @return the next smallest number */
    public int next() {
        return q.poll().val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */