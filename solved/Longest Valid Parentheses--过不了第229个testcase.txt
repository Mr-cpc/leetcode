public class Solution {
    public int longestValidParentheses(String s) {
        return longestValidParentheses(s.toCharArray());
    }
    public static int longestValidParentheses(char[] bras) {
        int[] prefix = tr(bras);
        int res = 0;
        for(int i = 0;i<prefix.length -1;i++) {
            for(int j = i +1;j<prefix.length;j++) {
                if(prefix[j] - prefix[i] == 0) {
                    if(bras[i] == '(' && !isRightMoreThanLeft(prefix,i,j))
                        res = Math.max(res,j - i);
                }
            }
        }
        return res;
    }

    public static int[] tr(char[] bra) {
        int[] res = new int[bra.length];
        for(int i =0;i<bra.length;i++) {
            res[i] = (bra[i] == '(') ? 1 : -1;
        }
        int[] res1 = new int[bra.length+1];
        for(int i = 1;i<res1.length;i++) {
            res1[i] += res1[i-1] + res[i-1];
        }
        return res1;
    }



    public static boolean isRightMoreThanLeft(int[] prefix,int st,int en) {
        for(int i = st +1;i<=en;i++) {
            if(prefix[i] - prefix[st] == -1)
                return true;
        }
        return false;
    }   
}