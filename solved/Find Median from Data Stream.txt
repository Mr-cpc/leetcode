class MedianFinder {

    PriorityQueue<Integer> max = new PriorityQueue<Integer>();
    PriorityQueue<Integer> min = new PriorityQueue<Integer>(new Comparator<Integer>() {
        public int compare(Integer a,Integer b) {
            return b>a?1:b==a?0:-1;
        }
     
    });
    // Adds a number into the data structure.
    public void addNum(int num) {
        if(max.size() ==0) {
            max.offer(num);
            return;
        }
        if(max.size()<=min.size()) {
            if(num<=min.peek()) {
                max.offer(min.poll() );
                min.offer(num);
            }
                
            
            else 
                max.offer(num);
            
        }
        else {
        
            if(num>=max.peek()) {
                min.offer(max.poll() );
                max.offer(num);
            }
                
            
            else 
                min.offer(num);
        
        }
    }

    // Returns the median of current data stream
    public double findMedian() {
        if(max.size() == min.size())
        {
            double a = (double)max.peek(),b = (double)min.peek();
            return (a + b) / 2;
        }
            
        else
            return (double)max.peek();
        
    }
};

// Your MedianFinder object will be instantiated and called as such:
// MedianFinder mf = new MedianFinder();
// mf.addNum(1);
// mf.findMedian();