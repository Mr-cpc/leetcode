public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        List<Integer> l = new ArrayList<>();
        for(int i = 0;i<candidates.length;i++) {
            if( (i != 0 && candidates[i] == candidates[i-1]) || target < candidates[i])
                continue;
            l.add(candidates[i]);
            p(candidates,target-candidates[i],ans,new ArrayList<>(l),i);
            l.remove(0);
        }
        return ans;
    }
    public void p(int[] candidates, int target,List<List<Integer>> ans,List<Integer> l,int st) {
        if(target < 0)
            return ;
        if(target == 0) {
            //Collections.sort(l);
            ans.add(l);
        }
        else {
            for(int i = st;i<candidates.length;i++) {
                if( (i != 0 && candidates[i] == candidates[i-1]) || target < candidates[i])
                    continue;
                // List<Integer> tmp = new ArrayList<>(l);
                // tmp.add(candidates[i]);
                l.add(candidates[i]);
                p(candidates,target-candidates[i],ans,new ArrayList<>(l),i);
                l.remove(l.size()-1);
            }         
        }
    }
}