public class Solution {
    Set<Integer> findNoInputVer(Set<Integer> c,int[] deg) {
        Set<Integer> noPre = new HashSet<>();
        for(int i = 0;i<deg.length;i++)
            if(deg[i] == 0 && !c.contains(i) )
                noPre.add(i); 
        return noPre;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] deg = new int[numCourses];
        for(int i = 0;i<prerequisites.length;i++)
            deg[prerequisites[i][0]]++;
        Set<Integer> noPre = null;
        Set<Integer> cur = new HashSet<>();
        while(true) {
            if(cur.size() == numCourses)
                return true;
            noPre = findNoInputVer(cur,deg);
            if(noPre.size() == 0)
                return false;
            Iterator<Integer> it = noPre.iterator();
            while(it.hasNext() ) {
                Integer a = it.next();
                cur.add(a);
                for(int i = 0;i<prerequisites.length;i++) 
                    if(prerequisites[i][1] == a) {
                        --deg[prerequisites[i][0]];
                        prerequisites[i][1] = -1;
                    }
            }
        }
        // return cur.size() == numCourses?true:false;
    }
}