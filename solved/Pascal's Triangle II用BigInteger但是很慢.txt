import java.math.BigInteger;
public class Solution {
    List<Integer> ans;
    private int getCombNum(int n,int r) {
        BigInteger up = BigInteger.ONE,down = BigInteger.ONE;
        for(int i = 0;i<r;i++) {
            up = up.multiply(BigInteger.valueOf((long)(n-i)) );
            down = down.multiply(BigInteger.valueOf((long)(1+i)) );
        }
        return Integer.parseInt( up.divide(down).toString() );
        
    }
    private void helper(List<Integer> list,int n) {
        int size = list.size();
        if(n - size == size) {
            size--;            
            while(size>=0) 
                list.add(list.get(size--));
        }
        else {
            size -= 2;
            while(size>=0)
                list.add(list.get(size--));
        }
    }
    public List<Integer> getRow(int rowIndex) {
        ans = new ArrayList<Integer>();
        if(rowIndex == 0){
            ans.add(1);
            return ans;
        }
        int half = rowIndex>>1;
        for(int i = 0;i<=half;i++) {
            ans.add(getCombNum(rowIndex,i));
        }
        helper(ans,rowIndex+1);
        return ans;
    }
}