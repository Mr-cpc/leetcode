public class Solution {
    public int partition(int[] a,int low,int high) {
        int t = a[low];
        while(low < high) {
            while(low<high && a[high] <= t)
                high--;
            a[low] = a[high];
            while(low<high && a[low] >= t)
                low++;
            a[high] = a[low];
        }
        a[low] = t;
        return low;
    }
    public int findKthLargest(int[] nums, int k,int st,int en) {
        int j = partition(nums,st,en);
        if(j == k-1)
            return nums[j];
  
        else {
            if(j<k-1) 
                return findKthLargest(nums,k,j+1,en);
            else
                return findKthLargest(nums,k,st,j-1);
        }
    }
    public int findKthLargest(int[] nums, int k) {
        /*
        int j = partition(nums,0,nums.length -1);
        while(j != k-1) {
            if(j<k-1) 
                j = partition(nums,j+1,nums.length - 1);
            else
                j = partition(nums,0,j-1);
        }*/
        return findKthLargest(nums,k,0,nums.length -1);
        
    }
}