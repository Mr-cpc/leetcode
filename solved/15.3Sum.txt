public class Solution {
    public int partition(int[] a,int low,int high)
    {
        int x= a[low];
        while(low<high)
        {
            while(low<high && a[high]>=x)
                high--;
            a[low] = a[high];
            while(low<high && a[low]<=x)
                low++;
            a[high] = a[low];
        }
        a[low] = x;
        return low;
    }
    public void quickSort(int[] a,int low,int high)
    {
        if(low>=high)
            return;
        int j = partition(a,low,high);
        quickSort(a,low,j-1);
        quickSort(a,j+1,high);
    }

    public List<List<Integer>> threeSum(int[] nums) 
    {
        if(nums.length < 3)
            return new ArrayList<List<Integer>>();
        List<List<Integer>> l = new ArrayList<List<Integer>>();
        List<Integer> l1 = null;
        //quickSort(nums,0,nums.length - 1);
        Arrays.sort(nums);
        if(nums[0] ==0 && nums[1] == 0 && nums[2] == 0)
        {
            l1 = new ArrayList<Integer>();
            l1.add(0);
            l1.add(0);
            l1.add(0);
            l.add(l1);
            return l;
        }
        int m = 0,n = 0;
        for(int j = 0;j<nums.length;j++)
        {

            if(j != 0 && nums[j] == nums[j-1])
                continue;
            m = j+1;n = nums.length - 1;
            while(m<n)
            {
                if(nums[m] + nums[n] < -nums[j] )
                {
                    m++;
                }
                else
                {
                    if(nums[m] + nums[n] == -nums[j])
                    {
                        if( (m != j+1 && nums[m] == nums[m-1]) || (n != nums.length - 1 && nums[n] == nums[n+1]) )
                        {
                            m++;
                            n--;
                            continue;
                        }
                        l1 = new ArrayList<Integer>();
                        l1.add(nums[j]);
                        l1.add(nums[m]);                        
                        l1.add(nums[n]);
                        l.add(l1);
                        m++;
                        n--;
                    }
                    else
                        n--;
                }

            }
        }
        return l;
       
    }
}