/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    Stack<ListNode> s1,s2;
    ListNode head;
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        s1 = new Stack<>();
        s2 = new Stack<>();
        head = new ListNode(0);

        while(l1 != null) {
            s1.push(l1);
            l1 = l1.next;
        }
        while(l2 != null) {
            s2.push(l2);
            l2 = l2.next;
        }
        int jw = 0,bwh;
        while( (!s1.isEmpty()) && (!s2.isEmpty()) ) {
            bwh = 0;
            bwh = s1.pop().val + s2.pop().val + jw;
            ListNode node = new ListNode(bwh % 10);
            add(node);
            jw = bwh / 10;
        }
        if(s1.isEmpty() ) {
            while(!s2.isEmpty() ) {
                bwh = 0;
                bwh = s2.pop().val + jw;
                ListNode node = new ListNode(bwh % 10);
                add(node);
                jw = bwh / 10;                
            }
            if(jw != 0) {
                ListNode node = new ListNode(jw);
                add(node);      
                jw = 0;
            }
        }
        if(s2.isEmpty() ) {
            while(!s1.isEmpty() ) {
                bwh = 0;
                bwh = s1.pop().val + jw;
                ListNode node = new ListNode(bwh % 10);
                add(node);
                jw = bwh / 10;   
            }
            if(jw != 0) {
                ListNode node = new ListNode(jw);
                add(node);                
            }            
        }
        return head.next;
    }
    private void add(ListNode node) {
        node.next = head.next;
        head.next = node;
    }
}