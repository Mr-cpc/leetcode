class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        List<String> ans = new LinkedList<>();
        Map<String,Integer> map = new HashMap<>();
        for(String s:words)
            map.put(s,map.getOrDefault(s,0)+1);
        Map<Integer,PriorityQueue<String>> m = new TreeMap<>((Integer i1,Integer i2)->i2-i1);
        for(Map.Entry<String,Integer> me : map.entrySet()) {
            String key = me.getKey();
            Integer val = me.getValue();
            PriorityQueue<String> list = m.get(val);
            if(list == null) 
                list = new PriorityQueue<>((s1,s2)->s1.compareTo(s2));
            list.add(key);
            m.put(val,list);
        }
        for(Map.Entry<Integer,PriorityQueue<String>> me : m.entrySet()) {
            if(k == 0)
                return ans;
            PriorityQueue<String> q = me.getValue();
            if(q.size() <= k) {
                while(!q.isEmpty()) {
                    ans.add(q.poll());
                    k--;
                }
            }
            else {
                while(k > 0) {
                    ans.add(q.poll());
                    k--;
                }
            }
        }
        return ans;
    }
}

