public class Solution {
    // int sum;
    // public List<List<Integer>> subsets(int[] nums,int target)    {
    //     Set<List<Integer>> ans = new HashSet<>();
    //     int a = 1 << nums.length;
    //     Arrays.sort(nums);
    //     for(int i = 0;i<a;i++) {
    //         List<Integer> l = new ArrayList<Integer>();
    //         sum = 0;
    //         for(int j = 0;j<nums.length;j++)
    //             if(((i>>j) & 1) == 1 ) {
    //                 if(sum >target)
    //                     break;
    //                 l.add(nums[j]);
    //                 sum += nums[j];
    //             }
    //         if(sum == target)
    //             ans.add(l);
    //     }
    //     return new ArrayList<List<Integer>>(ans);
    // }     
    // private void mySort(int[] nums) {
    //     int max = Integer.MIN_VALUE;
    //     for(int i:nums)
    //         max = Math.max(i,max);
    //     int spa[] = new int[max+1];
    //     for(int i:nums)
    //         spa[i]++;
    //     int j = 0;
    //     for(int i=0;i<spa.length;i++)
    //         if(spa[i] != 0) 
    //             for(int x = 0;x<spa[i];x++)
    //                 nums[j++] = i;
    // }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        //  return subsets(candidates,target);
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        p(candidates,target,ans,new ArrayList<>(),0);
        // for(int i = 0;i<candidates.length;i++){
        //     if((i != 0 && candidates[i] == candidates[i-1]) || target<candidates[i])
        //         continue;
        //     l.add(candidates[i]);
        //     p(candidates,target - candidates[i],ans,new ArrayList<>(l),i+1);
        //     l.remove(0);
        // }
        return ans;
    }
    public void p(int[] candidates, int target,List<List<Integer>> ans,List<Integer> l,int st) {
        if(target < 0)
            return;
        if(target == 0)
            ans.add(l);
        else {
            for(int i = st;i<candidates.length;i++) {
                if( target < candidates[i])
                    continue;
                l.add(candidates[i]);
                p(candidates,target-candidates[i],ans,new ArrayList<>(l),i+1);
                l.remove(l.size()-1 );
                while(i != candidates.length-1 && candidates[i] == candidates[i+1])
                    i++;
            }
        }
    }
}