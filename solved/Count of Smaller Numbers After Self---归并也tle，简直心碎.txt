public class Solution {
    public List<Integer> countSmaller(int[] nums) {
        Integer[] ans = new Integer[nums.length];
        for(int i = 0;i<ans.length;i++)
            ans[i] = 0;
        Num[] ns = new Num[nums.length];
        for(int i = 0;i<ns.length;i++) 
            ns[i] = new Num(nums[i],i);
        mergeSort(ns,0,ns.length-1,ans);
        return  Arrays.asList(ans);
    }
    public void mergeSort(Num[] nums,int st,int en,Integer[] ans) {
        if(st>=en)
            return ;
        int mid = st + ((en - st) >> 1);
        mergeSort(nums,st,mid,ans);
        mergeSort(nums,mid+1,en,ans);
        merge(nums,st,mid,en,ans);
    }
    //将st-mid和(mid+1)-en的两段有序子数组归并成一个有序的子数组，并放在st-en之间
    void merge(Num[] nums,int st,int mid,int en,Integer[] ans) {
        for(int i = st;i<=mid;i++) {
            for(int j = mid+1;j<=en;j++) {
                if(nums[j].val < nums[i].val)
                    ans[nums[i].idx]++;
            }
        }
        Num[] extra = new Num[en-st+1];
        int i = st,j = mid+1,k = 0;
        while(i<=mid && j <= en) {
            extra[k++] = nums[i].val > nums[j].val?nums[j++]:nums[i++];
        }
        while(i<=mid) {
            extra[k++] = nums[i++];
        }
        while(j<=en) {
            extra[k++] = nums[j++];
        } 
        for(int l = 0;l<extra.length;l++)
            nums[st+l] = extra[l];
    }
}

class Num {
    int val;
    int idx;
    Num(int val,int idx) {
        this.val = val;
        this.idx = idx;
    }
}

