public class Solution {
    static Map<Character,List<Character>> m;
    char[] cc ;
    List<String> ans;
    static {
        m = new HashMap<>();
        m.put('0',Arrays.asList());
        m.put('1',Arrays.asList());
        m.put('2',Arrays.asList('a','b','c') );
        m.put('3',Arrays.asList('d','e','f') );
        m.put('4',Arrays.asList('g','h','i') );
        m.put('5',Arrays.asList('j','k','l') );
        m.put('6',Arrays.asList('m','n','o') );
        m.put('7',Arrays.asList('p','q','r','s') );
        m.put('8',Arrays.asList('t','u','v') );
        m.put('9',Arrays.asList('w','x','y','z' ) );        
    }
    public List<String> letterCombinations(String digits) {
        cc = digits.toCharArray();
        ans = new ArrayList<>();
        if("".equals(digits) )
            return ans;
        p(ans,cc,0,"");
        return ans;
    }
    public void p(List<String> ans,char[] cc,int st,String tmp) {
        if(st == cc.length) {
            ans.add(tmp);
            return ;
        }
        else {
                List<Character> x = m.get(cc[st]);
                for(char c:x) {
                    p(ans,cc,st+1,tmp+c);
            }
        }
    }
}