/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    Iterator<NestedInteger> it;
    Iterator<NestedInteger> itf;
    public NestedIterator(List<NestedInteger> nestedList) {
        this.it = nestedList.iterator();
    }

    @Override
    public Integer next() {
        if(itf != null) {
            if(itf.hasNext() )
                return itf.next();
            
        }
            
        NestedList r = it.next();
        if(r.isInteger() ) {
            itf = null;
            return r.getInteger();
        }
            
        
        else {
            itf = r.getList().iterator();
            return itf.next();
        }
    }

    @Override
    public boolean hasNext() {
        if(itf != null) {
            return itf.hasNext() || it.hasNext();
        }
        return it.hasNext();
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */