// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
class PeekingIterator implements Iterator<Integer> {
    private Iterator<Integer> it;
    Integer peek;
    boolean lastIsPeek;
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    this.it = iterator;
	}

    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
	    lastIsPeek = true;
        if(peek != null) 
            return peek;
        
        else
        {
            if(it.hasNext() )
                peek = it.next();
            return peek;
        }
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	    if(peek != null)
	    {
	        int tmp = peek;
	        if(it.hasNext() )
	            peek = it.next();
	        return tmp;
	    }
	    else {
	            int tmp = it.next();
	            if(it.hasNext() ){
	                peek = it.next();
	                    
	            }
	        
        return tmp;	
	    }
	        
	   
	}

	@Override
	public boolean hasNext() {
	    return lastIsPeek || it.hasNext();
	}
}