public class Solution {
    int ans[];
    PriorityQueue<F> pq;
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 0)
            return new int[0];
        ans = new int[nums.length-k+1];
        pq = new PriorityQueue<F>(new Comparator<F>(){
            public int compare(F a ,F b) {
                return b.num - a.num;
            }
        } );
        
        for(int i = 0;i<k;i++) 
            pq.offer(new F(nums[i],i));
        F max = pq.peek();
        ans[0] = max.num;
        
        for(int i = k;i<nums.length;i++) {
            pq.offer(new F(nums[i],i));
            max = pq.peek();
            if(max.idx>i-k && max.idx<=i) {
                ans[i-k+1] = max.num;
                continue;
            }
            else {
                do {
                    max = pq.poll();
                    
                }while(max.idx<=i-k);
                ans[i-k+1] = max.num;
            }

        }
        return ans;
    }
}

class F {
    int num;
    int idx;
    F(int num,int idx) {
        this.num = num;
        this.idx = idx;
    }
}